// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/hyperledger/fabric-private-chaincode/client_sdk/go/pkg/gateway"
)

type Contract struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	EvaluateTransactionStub        func(name string, args ...string) ([]byte, error)
	evaluateTransactionMutex       sync.RWMutex
	evaluateTransactionArgsForCall []struct {
		name string
		args []string
	}
	evaluateTransactionReturns struct {
		result1 []byte
		result2 error
	}
	evaluateTransactionReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SubmitTransactionStub        func(name string, args ...string) ([]byte, error)
	submitTransactionMutex       sync.RWMutex
	submitTransactionArgsForCall []struct {
		name string
		args []string
	}
	submitTransactionReturns struct {
		result1 []byte
		result2 error
	}
	submitTransactionReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	CreateTransactionStub        func(name string, peerEndpoints ...string) (gateway.Transaction, error)
	createTransactionMutex       sync.RWMutex
	createTransactionArgsForCall []struct {
		name          string
		peerEndpoints []string
	}
	createTransactionReturns struct {
		result1 gateway.Transaction
		result2 error
	}
	createTransactionReturnsOnCall map[int]struct {
		result1 gateway.Transaction
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Contract) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *Contract) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *Contract) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *Contract) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *Contract) EvaluateTransaction(name string, args ...string) ([]byte, error) {
	fake.evaluateTransactionMutex.Lock()
	ret, specificReturn := fake.evaluateTransactionReturnsOnCall[len(fake.evaluateTransactionArgsForCall)]
	fake.evaluateTransactionArgsForCall = append(fake.evaluateTransactionArgsForCall, struct {
		name string
		args []string
	}{name, args})
	fake.recordInvocation("EvaluateTransaction", []interface{}{name, args})
	fake.evaluateTransactionMutex.Unlock()
	if fake.EvaluateTransactionStub != nil {
		return fake.EvaluateTransactionStub(name, args...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evaluateTransactionReturns.result1, fake.evaluateTransactionReturns.result2
}

func (fake *Contract) EvaluateTransactionCallCount() int {
	fake.evaluateTransactionMutex.RLock()
	defer fake.evaluateTransactionMutex.RUnlock()
	return len(fake.evaluateTransactionArgsForCall)
}

func (fake *Contract) EvaluateTransactionArgsForCall(i int) (string, []string) {
	fake.evaluateTransactionMutex.RLock()
	defer fake.evaluateTransactionMutex.RUnlock()
	return fake.evaluateTransactionArgsForCall[i].name, fake.evaluateTransactionArgsForCall[i].args
}

func (fake *Contract) EvaluateTransactionReturns(result1 []byte, result2 error) {
	fake.EvaluateTransactionStub = nil
	fake.evaluateTransactionReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Contract) EvaluateTransactionReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.EvaluateTransactionStub = nil
	if fake.evaluateTransactionReturnsOnCall == nil {
		fake.evaluateTransactionReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.evaluateTransactionReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Contract) SubmitTransaction(name string, args ...string) ([]byte, error) {
	fake.submitTransactionMutex.Lock()
	ret, specificReturn := fake.submitTransactionReturnsOnCall[len(fake.submitTransactionArgsForCall)]
	fake.submitTransactionArgsForCall = append(fake.submitTransactionArgsForCall, struct {
		name string
		args []string
	}{name, args})
	fake.recordInvocation("SubmitTransaction", []interface{}{name, args})
	fake.submitTransactionMutex.Unlock()
	if fake.SubmitTransactionStub != nil {
		return fake.SubmitTransactionStub(name, args...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.submitTransactionReturns.result1, fake.submitTransactionReturns.result2
}

func (fake *Contract) SubmitTransactionCallCount() int {
	fake.submitTransactionMutex.RLock()
	defer fake.submitTransactionMutex.RUnlock()
	return len(fake.submitTransactionArgsForCall)
}

func (fake *Contract) SubmitTransactionArgsForCall(i int) (string, []string) {
	fake.submitTransactionMutex.RLock()
	defer fake.submitTransactionMutex.RUnlock()
	return fake.submitTransactionArgsForCall[i].name, fake.submitTransactionArgsForCall[i].args
}

func (fake *Contract) SubmitTransactionReturns(result1 []byte, result2 error) {
	fake.SubmitTransactionStub = nil
	fake.submitTransactionReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Contract) SubmitTransactionReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.SubmitTransactionStub = nil
	if fake.submitTransactionReturnsOnCall == nil {
		fake.submitTransactionReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.submitTransactionReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Contract) CreateTransaction(name string, peerEndpoints ...string) (gateway.Transaction, error) {
	fake.createTransactionMutex.Lock()
	ret, specificReturn := fake.createTransactionReturnsOnCall[len(fake.createTransactionArgsForCall)]
	fake.createTransactionArgsForCall = append(fake.createTransactionArgsForCall, struct {
		name          string
		peerEndpoints []string
	}{name, peerEndpoints})
	fake.recordInvocation("CreateTransaction", []interface{}{name, peerEndpoints})
	fake.createTransactionMutex.Unlock()
	if fake.CreateTransactionStub != nil {
		return fake.CreateTransactionStub(name, peerEndpoints...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createTransactionReturns.result1, fake.createTransactionReturns.result2
}

func (fake *Contract) CreateTransactionCallCount() int {
	fake.createTransactionMutex.RLock()
	defer fake.createTransactionMutex.RUnlock()
	return len(fake.createTransactionArgsForCall)
}

func (fake *Contract) CreateTransactionArgsForCall(i int) (string, []string) {
	fake.createTransactionMutex.RLock()
	defer fake.createTransactionMutex.RUnlock()
	return fake.createTransactionArgsForCall[i].name, fake.createTransactionArgsForCall[i].peerEndpoints
}

func (fake *Contract) CreateTransactionReturns(result1 gateway.Transaction, result2 error) {
	fake.CreateTransactionStub = nil
	fake.createTransactionReturns = struct {
		result1 gateway.Transaction
		result2 error
	}{result1, result2}
}

func (fake *Contract) CreateTransactionReturnsOnCall(i int, result1 gateway.Transaction, result2 error) {
	fake.CreateTransactionStub = nil
	if fake.createTransactionReturnsOnCall == nil {
		fake.createTransactionReturnsOnCall = make(map[int]struct {
			result1 gateway.Transaction
			result2 error
		})
	}
	fake.createTransactionReturnsOnCall[i] = struct {
		result1 gateway.Transaction
		result2 error
	}{result1, result2}
}

func (fake *Contract) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.evaluateTransactionMutex.RLock()
	defer fake.evaluateTransactionMutex.RUnlock()
	fake.submitTransactionMutex.RLock()
	defer fake.submitTransactionMutex.RUnlock()
	fake.createTransactionMutex.RLock()
	defer fake.createTransactionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Contract) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
