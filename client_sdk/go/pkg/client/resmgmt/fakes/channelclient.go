// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/hyperledger/fabric-private-chaincode/client_sdk/go/pkg/client/resmgmt"
)

type ChannelClient struct {
	QueryStub        func(ChaincodeID string, Fcn string, Args [][]byte, targetEndpoints ...string) ([]byte, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		ChaincodeID     string
		Fcn             string
		Args            [][]byte
		targetEndpoints []string
	}
	queryReturns struct {
		result1 []byte
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ExecuteStub        func(ChaincodeID string, Fcn string, Args [][]byte) (string, error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		ChaincodeID string
		Fcn         string
		Args        [][]byte
	}
	executeReturns struct {
		result1 string
		result2 error
	}
	executeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ChannelClient) Query(ChaincodeID string, Fcn string, Args [][]byte, targetEndpoints ...string) ([]byte, error) {
	var ArgsCopy [][]byte
	if Args != nil {
		ArgsCopy = make([][]byte, len(Args))
		copy(ArgsCopy, Args)
	}
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		ChaincodeID     string
		Fcn             string
		Args            [][]byte
		targetEndpoints []string
	}{ChaincodeID, Fcn, ArgsCopy, targetEndpoints})
	fake.recordInvocation("Query", []interface{}{ChaincodeID, Fcn, ArgsCopy, targetEndpoints})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(ChaincodeID, Fcn, Args, targetEndpoints...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryReturns.result1, fake.queryReturns.result2
}

func (fake *ChannelClient) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *ChannelClient) QueryArgsForCall(i int) (string, string, [][]byte, []string) {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return fake.queryArgsForCall[i].ChaincodeID, fake.queryArgsForCall[i].Fcn, fake.queryArgsForCall[i].Args, fake.queryArgsForCall[i].targetEndpoints
}

func (fake *ChannelClient) QueryReturns(result1 []byte, result2 error) {
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ChannelClient) QueryReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ChannelClient) Execute(ChaincodeID string, Fcn string, Args [][]byte) (string, error) {
	var ArgsCopy [][]byte
	if Args != nil {
		ArgsCopy = make([][]byte, len(Args))
		copy(ArgsCopy, Args)
	}
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		ChaincodeID string
		Fcn         string
		Args        [][]byte
	}{ChaincodeID, Fcn, ArgsCopy})
	fake.recordInvocation("Execute", []interface{}{ChaincodeID, Fcn, ArgsCopy})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(ChaincodeID, Fcn, Args)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.executeReturns.result1, fake.executeReturns.result2
}

func (fake *ChannelClient) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *ChannelClient) ExecuteArgsForCall(i int) (string, string, [][]byte) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].ChaincodeID, fake.executeArgsForCall[i].Fcn, fake.executeArgsForCall[i].Args
}

func (fake *ChannelClient) ExecuteReturns(result1 string, result2 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ChannelClient) ExecuteReturnsOnCall(i int, result1 string, result2 error) {
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ChannelClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ChannelClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resmgmt.ChannelClient = new(ChannelClient)
